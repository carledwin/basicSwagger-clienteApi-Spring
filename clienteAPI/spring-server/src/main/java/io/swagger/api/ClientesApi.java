/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Cliente;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-11-08T16:23:03.102-02:00")

@Api(value = "clientes", description = "the clientes API")
public interface ClientesApi {

    @ApiOperation(value = "Altera de cliente", notes = "| endpoint *altera o* cliente.", response = Cliente.class, tags={ "Manutenção", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cliente alterado.", response = Cliente.class) })
    
    @RequestMapping(value = "/clientes/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Cliente> alteraCliente(@ApiParam(value = "",required=true ) @PathVariable("id") Integer id);


    @ApiOperation(value = "Busca de cliente", notes = "| endpoint *busca o* cliente.", response = Cliente.class, tags={ "Consulta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Cliente.class) })
    
    @RequestMapping(value = "/clientes/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Cliente> buscaCliente(@ApiParam(value = "",required=true ) @PathVariable("id") Integer id);


    @ApiOperation(value = "Busca todos clientes", notes = "| endpoint *busca todos* clientes.", response = Cliente.class, responseContainer = "List", tags={ "Consulta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Cliente.class, responseContainer = "List") })
    
    @RequestMapping(value = "/clientes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Cliente>> buscaTodos(@ApiParam(value = "" , defaultValue="application/json") @RequestHeader(value="Content-Type", required=false) String contentType);


    @ApiOperation(value = "Cria novo cliente", notes = "| endpoint *cria o* cliente.", response = Cliente.class, tags={ "Manutenção", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Novo cliente criado.", response = Cliente.class) })
    
    @RequestMapping(value = "/clientes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Cliente> criaCliente(@ApiParam(value = "Informações do Cliente." ,required=true )  @Valid @RequestBody Cliente cliente);


    @ApiOperation(value = "Remove o cliente", notes = "| endpoint *remove o* cliente.", response = Void.class, tags={ "Manutenção", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cliente removido.", response = Void.class) })
    
    @RequestMapping(value = "/clientes/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeCliente(@ApiParam(value = "",required=true ) @PathVariable("id") Integer id);

}
